# Comprehensive Product Requirements Document (PRD)
## Karno Auto Parts E-commerce Platform - Redevelopment & Enhancement Plan

## 1. Project Overview

Karno is an existing e-commerce platform specializing in rare and original car parts with vehicle pre-sale services. This document outlines the current state of the platform and required improvements based on a thorough review of the existing structure and desired enhancements.

## 2. Current System Assessment

### 2.1 Existing Components

#### Frontend Infrastructure
- React application with component-based architecture
- Redux state management for auth, cart, product, and UI states
- Material UI implementation with RTL support
- Mobile-responsive layouts

#### Backend Infrastructure
- Node.js/Express API structure
- MongoDB database integration
- JWT authentication system
- API services for products, categories, orders, etc.

#### Core Features Currently Implemented
- âœ… Basic product browsing and filtering
- âœ… Simple cart functionality
- âœ… Phone number authentication (basic implementation)
- âœ… Product listing and detail pages
- âœ… Basic admin dashboard
- âœ… Zarinpal payment integration (initial version)

### 2.2 Current Limitations

- ðŸ”´ Authentication flow is disjointed and lacks OTP verification
- ðŸ”´ Guest checkout is not properly implemented
- ðŸ”´ Cart persistence between sessions is unreliable
- ðŸ”´ Form designs are inconsistent across the platform
- ðŸ”´ User profile management is limited
- ðŸ”´ Admin dashboard lacks comprehensive analytics
- ðŸ”´ Search functionality is basic without advanced filtering

## 3. Development Requirements

### 3.1 Components to Rebuild

#### Authentication System
- **Current state**: Basic phone login without proper verification
- **Required changes**:
  - Implement robust OTP verification system
  - Create secure JWT token management
  - Add rate limiting for OTP requests
  - Develop proper session handling
  - Implement account verification status tracking

#### Shopping Cart System
- **Current state**: Simple cart with limited persistence
- **Required changes**:
  - Implement localStorage-based guest cart
  - Develop cart merging system when guest users authenticate
  - Improve cart persistence across sessions
  - Add inventory validation during checkout

#### Checkout Process
- **Current state**: Basic direct checkout requiring login first
- **Required changes**:
  - Redesign to follow new user flow (browse â†’ cart â†’ login/register â†’ address â†’ payment)
  - Implement two-step checkout (address collection then payment)
  - Improve Zarinpal integration with better error handling
  - Add order confirmation and invoice generation

#### User Forms
- **Current state**: Inconsistent form designs with poor validation
- **Required changes**:
  - Standardize all form components
  - Implement comprehensive client and server validation
  - Create consistent error messaging
  - Improve accessibility of all forms

### 3.2 Features to Add/Improve

#### Enhanced User Account Management
- Add profile picture upload capability
- Implement address book for multiple shipping addresses
- Create order history with tracking information
- Develop wishlist functionality
- Add user preferences (car models owned, etc.)

#### Advanced Product Search & Filtering
- Implement faceted search by multiple criteria
- Add compatibility filtering by vehicle make/model/year
- Create product comparison functionality
- Implement saved searches
- Add sorting options (price, popularity, etc.)

#### Expanded Admin Capabilities
- Create comprehensive sales analytics dashboard
- Implement inventory management with low stock alerts
- Add bulk product import/export functionality
- Develop promotion and discount management
- Create user management with roles and permissions

#### Performance Optimizations
- Implement frontend code splitting and lazy loading
- Add server-side rendering for critical pages
- Improve image optimization and delivery
- Implement comprehensive caching strategy
- Add performance monitoring

## 4. User Flow Specifications

### 4.1 Guest-to-Registered User Flow (Priority)

#### Browsing Experience
1. User visits website without authentication
2. User can browse all products, categories, and brands
3. Product information is fully visible including pricing
4. Search and filter functionality available to all users

#### Cart Management
1. Guest users can add products to cart (stored in localStorage)
2. Cart contents persist across sessions via localStorage
3. Guests can view, update quantities, and remove items from cart
4. Cart displays subtotal, any available discounts, and estimated total

#### Checkout Process
1. When guest clicks "Proceed to Checkout," system redirects to authentication
2. Authentication form collects:
   - First name, last name
   - Mobile number
   - Password (for new users)
3. OTP verification code sent to mobile number
4. User must enter valid OTP to proceed
5. Upon successful verification:
   - Guest cart merges with user profile
   - User proceeds to address collection
6. Address form collects shipping details:
   - Full name, phone number
   - Complete address (street, building, unit)
   - Postal code, city, province
   - Delivery instructions
7. Payment via Zarinpal gateway
8. Order confirmation with invoice and tracking details

### 4.2 Additional User Flows

#### User Account Management
1. Profile editing with personal information updates
2. Address book management
3. Order history viewing with status tracking
4. Password change functionality
5. Account preferences settings

#### Admin Product Management
1. Product creation with multiple images
2. Inventory management
3. Category and brand association
4. Pricing and discount settings
5. Product visibility control

#### Order Processing Flow
1. Order receipt in admin panel
2. Order status updates (processing, shipped, delivered)
3. Shipping information entry
4. Invoice generation and delivery
5. Return and refund processing

## 5. Technical Implementation Details

### 5.1 Frontend Enhancements

#### Component Structure
- Implement atomic design methodology
- Create reusable form components
- Develop consistent UI component library
- Improve responsive behavior

#### State Management
- Refine Redux store structure
- Implement proper error handling in reducers
- Add middleware for localStorage synchronization
- Improve action creators for better type safety

#### Performance
- Implement React.memo and useMemo for optimized rendering
- Add code splitting for route-based bundle loading
- Implement service worker for offline capabilities
- Add proper caching of static assets

### 5.2 Backend Enhancements

#### API Structure
- Implement RESTful API best practices
- Add proper error handling middleware
- Improve response formatting
- Implement API versioning

#### Security
- Add rate limiting for sensitive endpoints
- Improve password hashing with proper salting
- Implement proper CORS configuration
- Add request validation middleware

#### Database
- Optimize MongoDB schema design
- Implement indexes for common queries
- Add data validation at schema level
- Implement proper error handling for database operations

## 6. Implementation Priorities

### 6.1 Phase 1: Core Functionality Rebuild
1. Guest cart implementation
2. Authentication system with OTP verification
3. Cart merging functionality
4. Checkout process redesign
5. Form standardization

### 6.2 Phase 2: Enhanced User Experience
1. Advanced product search and filtering
2. User account management improvements
3. Order tracking enhancements
4. Wishlist functionality
5. Product recommendations

### 6.3 Phase 3: Admin and Operations
1. Admin dashboard redesign
2. Sales analytics implementation
3. Inventory management improvements
4. Bulk operations functionality
5. User management system

## 7. Technical Requirements

### 7.1 Frontend
- React 18+
- Redux Toolkit for state management
- Material UI for component library
- React Router for navigation
- Formik/React Hook Form for form handling
- Axios for API requests
- LocalForage for enhanced localStorage

### 7.2 Backend
- Node.js with Express
- MongoDB with Mongoose
- JWT for authentication
- Bcrypt for password hashing
- Express Validator for request validation
- Multer for file uploads
- Zarinpal SDK for payments

### 7.3 DevOps
- CI/CD pipeline configuration
- Automated testing setup
- Staging and production environments
- Monitoring and logging implementation
- Backup and recovery procedures

## 8. Success Metrics

- Increase in conversion rate from guest to registered user
- Reduction in cart abandonment rate
- Improvement in page load performance
- Increase in average order value
- Growth in repeat customer rate
- Reduction in support requests related to checkout issues
